# -*- coding: utf-8 -*-# !/usr/bin/env python#############################################################################################################               Identificacao do programa                      ###### ------------------------------------------------------------------------------------------------------###### Objetivo: Este script calcula o a exatidao, sensibilidade e especificidade#####       para todas as arquiteturas                                 ########## Programador: Scheila de Avila e Silva                            ########## Data: mestrado - melhorado em 5 de agosto de 2011                        ########## Programador: Rafael Vieira Coelho                            ########## Data: doutorado - melhorado em 13 de novembro de 2017                        #####################################################################################################################Orientacoes###################################################################################### no terminal digitar python (espaco) nome_do_programa (espaco) numero de epocas (espaco)# numero_neuronios_ocultos (espaco) numero_folds (espaco) fator_sigma (epaco) caminho (espaco) num_seq                                             ## o programa pode estar em uma pasta e os arquivos em outra. para o programa funcionar basta digitar   ## o nome dos arquivos de entrada                                       ## com o caminho.                                                           ##########################################################################################################import sysfrom math import sqrt#python $dir_py/verificaScore.py $N $R $E $L sigma70 $dir_dados $num_seq_testeN = int(sys.argv[1]) #neuronioR = int(sys.argv[2]) #redeE = int(sys.argv[3]) #epocaL = int(sys.argv[4]) #listafator_sigma = str(sys.argv[5]) #sigma70caminho_endereco = str(sys.argv[6]) #pastanum_seq_teste = int(sys.argv[7]) #192 (sequencias positivas)#N = 1#R = 1#E = 5#L = 5#fator_sigma = 'sigma70'#caminho_endereco = '/Users/coelho/Dropbox/Doutorado_Privado/Redes_neurais/C.Analisar_rede/sigma70_straight_col_2/sigma70_straight_simple/'#num_seq_teste = 192exatidoes = []sensibilidades = []especificidades = []exatidaoTotal = 0sensibilidadeTotal = 0especificidadeTotal = 0contFileTeste = []totalTeste = 0contFileTreino = []totalTreino = 0listaMTeste = []listaMTreino = []dir_dados = n'/Users/coelho/Dropbox/Doutorado_Privado/Redes_neurais/C.Analisar_rede/Python/resultados/'fout = open(dir_dados + 'Matriz_de_confusao'+'_epocas_' + str(E) + '_hidden_' + str(N) + '_' + fator_sigma + '.txt', 'w')limiar = 0.5limiar_menor = 0limiar_maior = 0limiar_menor2 = 0limiar_maior2 = 0for z in range(1, (L + 1)):    #rede_1_5_hidden_1_list_1_Erroteste_sigma70.txt    print(caminho_endereco + 'erro_teste/rede' + '_' + str(R) + '_epocas_' + str(E) + '_hidden_' + str(N) + '_list_' + str(z) + '_Erroteste_' + fator_sigma + '.txt')    ent = open(caminho_endereco + 'erro_teste/_rede' + '_' + str(R) +     '_' + str(E) + '_hidden_' + str(N) + '_list_' + str(z) + '_Erroteste_' + fator_sigma + '.txt', 'r')    lista_dados = []    lista_dados = ent.readlines()    lista_dados = [line.strip() for line in lista_dados]    lista_prom = lista_dados[0:num_seq_teste]    for elem in lista_dados[0:num_seq_teste - 1]:        valor_rn_prom = abs(float(elem))        if valor_rn_prom > limiar:            limiar_maior += 1        else:            limiar_menor += 1    lista_aleat=lista_dados[num_seq_teste:]    for elem2 in lista_dados[num_seq_teste - 1:]:        valor_rn_aleat = abs(float(elem2))        if valor_rn_aleat > limiar:            limiar_maior2 += 1        else:            limiar_menor2 += 1    fout.write('-----------Rede ' + str(z) + '----------\n')    vp = float(limiar_menor)    fn = float(limiar_maior)    fout.write('VP=' + str(vp / (L)) + ' FN=' + str(fn / (L)) + '\n')    vn = float(limiar_menor2)    fp = float(limiar_maior2)    #print("VP ==> ", vp)    #print("VN ==> ", vn)    #print("FN ==> ", fn)    #print("FP ==> ", fp)    fout.write('FP=' + str(fp / (L)) + ' VN=' + str(vn / (L)) + '\n')    exatidao = ((vp + vn) / (vp + vn + fp + fn)) * 100    exatidoes.append(exatidao)    exatidaoTotal += exatidao    fout.write('Exatidao=' + str(exatidao) + '\n')    #print("Exatidao=", exatidao)    sensibilidade = (vp / (vp + fn)) * 100    sensibilidades.append(sensibilidade)    sensibilidadeTotal = sensibilidadeTotal + sensibilidade    fout.write('Sensibilidade=' + str(sensibilidade) + '\n')    #print("Sensibilidade=", sensibilidade)    especificidade = (vn / (vn + fp)) * 100    especificidades.append(especificidade)    especificidadeTotal += especificidade    fout.write('Especificidade=' + str(especificidade) + '\n')    #print("Especificidade=", especificidade)    ent.close()    # Abre o arquivo redeXXhiddenXRMSteste.txt, le o arq para uma lista    # soma todos seus valores, divide por 10 e coloca na lista de medias    frmsTeste = open(caminho_endereco + 'RMS/_rede_' + str(R) + '_' +     str(E) + '_hidden_' + str(N) + '_RMSteste_' + fator_sigma + '.txt','r')    contFileTeste = frmsTeste.readlines()    totalTeste = 0    for i in contFileTeste:        totalTeste += float(i)    totalTesteMedia = totalTeste / len(contFileTeste)    listaMTeste.append(totalTesteMedia)    # Abre o arquivo redeXXhiddenXRMStreino.txt, le o arq para uma lista    # soma todos seus valores, divide por 5 e coloca na lista de medias    frmsTreino = open(caminho_endereco + 'RMS/_rede_' + str(R) + '_' +     str(E) +     '_hidden_' + str(N) + '_RMStreino_' + fator_sigma + '.txt','r')    contFileTreino = frmsTreino.readlines()    totalTreino = 0    for i in contFileTreino:        totalTreino += float(i)    totalTreinoMedia = totalTreino / len(contFileTreino)    listaMTreino.append(totalTreinoMedia)    frmsTeste.close()    frmsTreino.close()# escreve no arq. a a media da exatidao, da sensibilidade e da especificidadefout.write('Media da exatidao=' + str(exatidaoTotal / L) + '\n')fout.write('Media da sensibilidade=' + str(sensibilidadeTotal / L) + '\n')fout.write('Media da especificidade=' + str(especificidadeTotal / L) + '\n')# Calcula o Desvio Padrao para a Media da Exatidaoquadrados = 0for ex in exatidoes:    quadrados = quadrados + ((exatidaoTotal / L) - ex) ** 2desvioPadraoExatidao = sqrt(quadrados / (L - 1))fout.write('Desvio Padrao da Exatidao=' + str(desvioPadraoExatidao) + '\n')# Calcula o Desvio Padrao para a Media da Sensibilidadequadrados = 0for s in sensibilidades:    quadrados = quadrados + ((sensibilidadeTotal / L) - s) ** 2desvioPadraoSensibilidade = sqrt(quadrados / (L - 1))fout.write('Desvio Padrao da Sensibilidade=' + str(desvioPadraoSensibilidade) + '\n')# Calcula o Desvio Padrao para a Media da Especificidadequadrados = 0for e in especificidades:    quadrados = quadrados + ((especificidadeTotal / L) - e) ** 2desvioPadraoEspecificidade = sqrt(quadrados / (L - 1))fout.write('Desvio Padrao da Especificidade=' + str(desvioPadraoEspecificidade) + '\n')# Calcula a Media das Medias dos RMStestesomaMediasTeste = 0for m in listaMTeste:    somaMediasTeste = somaMediasTeste + mfout.write('Media das Medias do RMSteste=' + str(somaMediasTeste / L) + '\n')# Calcula a Media das Medias dos RMStreinosomaMediasTreino = 0for m in listaMTreino:    somaMediasTreino = somaMediasTreino + mfout.write('Media das Medias do RMStreino=' + str(somaMediasTreino / L) + '\n')# Calcula o Desvio Padrao para a Media das Medias RMStestequadrados = 0for v in listaMTeste:    print(str(v))    quadrados = quadrados + ((somaMediasTeste / L) - v) ** 2desvioPadraoMMTeste = sqrt(quadrados / (len(listaMTeste) - 1))fout.write('Desvio Padrao da Media das Medias de RMSteste=' + str(desvioPadraoMMTeste) + '\n')# Calcula o Desvio Padrao para a Media das Medias RMStreinoquadrados = 0for v in listaMTreino:    quadrados = quadrados + ((somaMediasTreino / L) - v) ** 2desvioPadraoMMTreino = sqrt(quadrados / (len(listaMTreino) - 1))fout.write('Desvio Padrao da Media das Medias de RMStreino=' + str(desvioPadraoMMTreino) + '\n')fout.close()